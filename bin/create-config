#!/usr/bin/env node

// Ghost Configuration for Heroku
var fs = require('fs');
var path = require('path');
var url = require('url');

var envValues = require('./common/env-values');
var appRoot = path.join(__dirname, '..');

function createConfig() {
    var fileStorage, storage;

    if (!!process.env.S3_ACCESS_KEY_ID) {
        fileStorage = true
        storage = {
            active: 's3',
            s3: {
                accessKeyId: process.env.S3_ACCESS_KEY_ID,
                secretAccessKey: process.env.S3_ACCESS_SECRET_KEY,
                region: process.env.S3_BUCKET_REGION,
                bucket: process.env.S3_BUCKET_NAME,
                assetHost: process.env.S3_ASSET_HOST_URL,
                pathPrefix: process.env.S3_ASSET_PATH_PREFIX,
                endpoint: "",
                serverSideEncryption: "",
                forcePathStyle: true,
            }
        }
    }
    else if (!!process.env.BUCKETEER_AWS_ACCESS_KEY_ID) {
        fileStorage = true
        storage = {
            active: 's3',
            's3': {
                accessKeyId: process.env.S3_ACCESS_KEY_ID,
                secretAccessKey: process.env.S3_ACCESS_SECRET_KEY,
                region: process.env.S3_BUCKET_REGION,
                bucket: process.env.S3_BUCKET_NAME,
                assetHost: process.env.S3_ASSET_HOST_URL,
                pathPrefix: process.env.S3_ASSET_PATH_PREFIX,
                endpoint: "",
                serverSideEncryption: "",
                forcePathStyle: true
            }
        }
    }
    else {
        fileStorage = false
        storage = {}
    }

    let config = {
        url: process.env.PUBLIC_URL,
        server: {
            host: '0.0.0.0',
            port: process.env.PORT
        },
        paths: {
            contentPath: '/app/content/'
        },
        logging: {
            level: "info",
            transports: ["stdout"]
        },
        mail: {
            transport: 'SMTP',
            options: {
                service: 'Sendgrid',
                auth: {
                    user: process.env.SENDGRID_SMTP_LOGIN,
                    pass: process.env.SENDGRID_SMTP_PASSWORD
                }
            }
        },
        fileStorage: fileStorage,
        storage: storage,
        database: {
            client: 'mysql',
            connection: getMysqlConfig(envValues.DATABASE_URL),
            pool: {
                min: 0,
                max: 5
            },
            debug: false
        }
    };

    return config;
}

function getMysqlConfig(connectionUrl) {
    if (connectionUrl == null) {
        return {};
    }

    var dbConfig = url.parse(connectionUrl);
    if (dbConfig == null) {
        return {};
    }

    var dbAuth = dbConfig.auth ? dbConfig.auth.split(':') : [];
    var dbUser = dbAuth[0];
    var dbPassword = dbAuth[1];

    if (dbConfig.pathname == null) {
        var dbName = 'ghost';
    } else {
        var dbName = dbConfig.pathname.split('/')[1];
    }

    var dbConnection = {
        host: dbConfig.hostname,
        port: dbConfig.port || '3306',
        user: dbUser,
        password: dbPassword,
        database: dbName
    };
    return dbConnection;
}

var configContents = JSON.stringify(createConfig(), null, 2);
fs.writeFileSync(path.join(appRoot, 'config.production.json'), configContents);